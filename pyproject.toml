[tool.poetry]
name = "boilerplate-backend"
version = "1.1.0"
description = ""
authors = ["Johan Guse <johanguse@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
charset-normalizer = "^3.4.3"  # Needed cause of a bug in poetry
urllib3 = "^2.5.0"  # Needed cause of a bug in poetry
fastapi = {extras = ["standard"], version = "^0.118.0"}
fastapi-users = {extras = ["oauth", "sqlalchemy"], version = "^14.0.1"}
fastapi-pagination = {extras = ["sqlalchemy"], version = "^0.14.2"}
sqlalchemy = "^2.0.43"
psycopg2-binary = "^2.9.10"
pydantic = {extras = ["email"], version = "^2.11.9"}
alembic = "^1.16.5"
uvicorn = "^0.37.0"
pyjwt = {extras = ["crypto"], version = "^2.10.1"}
passlib = {extras = ["argon2"], version = "^1.7.4"}
python-dotenv = "^1.1.1"
pydantic-settings = "^2.11.0"
python-multipart = "^0.0.20"
pandas = "^2.3.3"
chardet = "^5.2.0"
celery = "^5.5.3"
resend = "^2.15.0"
asyncpg = "^0.30.0"
boto3 = "^1.40.41"
httpx-oauth = "^0.16.1"
sqlalchemy-utils = "^0.42.0"
loguru = "^0.7.3"
python-json-logger = "^3.3.0"
ua-parser = "^1.0.1"
user-agents = "^2.2.0"
python-terraform = "^0.10.1"
cachetools = "^6.2.0"
stripe = "^12.5.1"
cryptography = "^46.0.1"
python-magic = "^0.4.27"
babel = "^2.17.0"
uvloop = "^0.21.0"
httptools = "^0.6.4"
orjson = "^3.11.3"
slowapi = "^0.1.9"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
taskipy = "^1.14.1"
ruff = "^0.13.2"
httpx = "^0.28.1"
testcontainers = {version = "^4.13.1", extras = ["postgresql"]}
factory-boy = "^3.3.3"
pytest-asyncio = "^1.2.0"
aiosqlite = "^0.21.0"
asyncpg = "^0.30.0"

[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']
ignore = ["E203", "E501", "PLC0415", "PLR0913", "PLR0917"]

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.ruff.lint.per-file-ignores]
"src/activity_log/service.py" = ["PLC0415"]
"src/auth/user_routes.py" = ["PT028"]  # Test endpoints in API routes
"tests/**/*.py" = ["PLR2004", "PLR6301"]  # Allow magic values and non-static methods in tests
"scripts/**/*.py" = ["PLR2004", "PLR0912", "PLR0914", "PLR0915"]  # Allow magic values and complexity in scripts

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.taskipy.tasks]
lint = 'ruff check src && ruff check src --diff'
format = 'ruff check src --fix && ruff format src'
format-check = 'ruff format src --check'
type-check = 'echo "No type checking configured"'
run = 'uvicorn src.main:app --reload --port 8000'
dev = 'uvicorn src.main:app --reload --port 8000'
pre_test = 'task lint'
test = 'pytest -s -x --cov=src --cov-config=pyproject.toml -vv'
test-cov = 'pytest --cov=src --cov-config=pyproject.toml --cov-report=html --cov-report=xml'
post_test = 'coverage run -m pytest --cov=src --cov-config=pyproject.toml'
test-auth = 'pytest tests/test_auth.py -v'
test-watch = 'pytest -xvs --watch'
migrations = 'alembic revision --autogenerate -m'
migrate = 'alembic upgrade head'
seed = 'python scripts/seed.py'
reset-db = 'python scripts/reset_db.py'
reset-and-seed = 'python scripts/reset_db.py && python scripts/seed.py'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
	"src/teams/*",
]
