# Copy this file to `.env` and fill in secret values before running the app.
# Keep secrets out of version control. Example generation:
#   python -c "import secrets; print(secrets.token_urlsafe(32))"

# -----------------
# App
# -----------------
PROJECT_NAME="FastAPI SaaS Boilerplate"
PROJECT_VERSION="0.0.1"
PROJECT_DESCRIPTION="FastAPI SaaS Boilerplate Backend"
API_V1_STR="/api/v1"
DEFAULT_PAGE_SIZE=30

# -----------------
# Database
# -----------------
# Example: postgresql://user:password@localhost:5432/dbname
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=postgres_dev
DATABASE_HOST=db
DATABASE_PORT=5432
DATABASE_URL="postgresql://postgres:postgres@db:5432/postgres_dev"

# -----------------
# Security / JWT
# -----------------
# SECRET_KEY is used by the application for various cryptographic operations.
# JWT secrets/tokens are used for authentication. Replace with secure values.
SECRET_KEY="replace-with-a-very-secret-random-string"
JWT_SECRET="replace-with-a-jwt-secret"
JWT_LIFETIME_SECONDS=3600
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_MINUTES=10080

# -----------------
# Better (external) Auth integration (optional)
# -----------------
# Set BETTER_AUTH_ENABLED=true to enable external JWT/oidc validation.
BETTER_AUTH_ENABLED=false
BETTER_AUTH_ALGORITHM="RS256"
BETTER_AUTH_JWKS_URL=
BETTER_AUTH_SHARED_SECRET=
BETTER_AUTH_ISSUER=
BETTER_AUTH_AUDIENCE=
BETTER_AUTH_EMAIL_CLAIM="email"
BETTER_AUTH_SUB_IS_EMAIL=false

# -----------------
# OAuth Providers (Social Login)
# -----------------
# Google OAuth 2.0
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# GitHub OAuth
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Microsoft OAuth 2.0
MICROSOFT_CLIENT_ID=your-microsoft-client-id
MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret

# Apple Sign-In
APPLE_CLIENT_ID=your-apple-client-id
APPLE_CLIENT_SECRET=your-apple-client-secret

# -----------------
# Email / Resend
# -----------------
RESEND_API_KEY=
RESEND_FROM_EMAIL="FastAPI <onboarding@resend.dev>"

# -----------------
# Frontend / Misc
# -----------------
FRONTEND_URL="http://localhost:5173"
LOG_LEVEL=INFO
SENTRY_DSN=

# Cloudflare R2 (or S3-like) storage settings - required by Settings; fill if you use uploads
R2_ENDPOINT_URL=
R2_ACCESS_KEY_ID=
R2_SECRET_ACCESS_KEY=
R2_BUCKET_NAME=

# AI Configuration Example
# Copy this to your .env file and update with your actual API keys

# AI Provider Configuration (choose one)
# Option 1: Direct OpenAI (most reliable, higher cost)
OPENAI_API_KEY=sk-your-openai-api-key-here
AI_PROVIDER=openai
AI_MODEL_TEXT=gpt-4-turbo
AI_MODEL_EMBEDDINGS=text-embedding-3-small

# Option 2: OpenRouter (cost-effective, multiple providers)
OPENROUTER_API_KEY=sk-or-your-openrouter-api-key-here
AI_PROVIDER=openrouter
AI_MODEL_TEXT=openai/gpt-4-turbo
AI_MODEL_EMBEDDINGS=openai/text-embedding-3-small

# Option 3: Anthropic (alternative provider)
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here
AI_PROVIDER=anthropic
AI_MODEL_TEXT=claude-3-5-sonnet-20241022

# Common settings
AI_MAX_TOKENS=4096

# OpenRouter Model Examples:
# AI_MODEL_TEXT=openai/gpt-4-turbo          # GPT-4 Turbo via OpenRouter
# AI_MODEL_TEXT=anthropic/claude-3-5-sonnet # Claude 3.5 Sonnet via OpenRouter
# AI_MODEL_TEXT=google/gemini-pro          # Google Gemini Pro via OpenRouter
# AI_MODEL_TEXT=meta-llama/llama-2-70b-chat # Llama 2 70B via OpenRouter

# Note: OpenRouter typically offers 2-5x cost savings compared to direct APIs