---
description:
globs:
alwaysApply: false
---
# UserCenter Backend - Project Structure

## Domain-Driven Design (DDD) Structure

```
src/
├── main.py                       # Application entry point
├── config/                       # Configuration management
│   ├── settings.py               # Application settings
│   ├── environment.py            # Environment configuration
│   ├── logging.py                # Logging configuration
│   └── constants.py              # Application constants
├── auth/                         # Authentication and authorization
│   ├── users.py                  # User management
│   ├── dependencies.py           # Auth dependencies
│   ├── permissions.py            # Permission management
│   ├── oauth.py                  # OAuth providers
│   ├── models.py                 # Auth data models
│   ├── schemas.py                # Auth schemas/DTOs
│   ├── service.py                # Auth business logic
│   └── router.py                 # Auth routes
├── teams/                        # Team management
│   ├── models.py                 # Team data models
│   ├── schemas.py                # Team schemas/DTOs
│   ├── service.py                # Team business logic
│   ├── router.py                 # Team routes
│   ├── permissions.py            # Team-specific permissions
│   └── exceptions.py             # Team-specific exceptions
├── projects/                     # Project management
│   ├── models.py                 # Project data models
│   ├── schemas.py                # Project schemas/DTOs
│   ├── service.py                # Project business logic
│   └── router.py                 # Project routes
├── knowledge_base/               # Knowledge base management
│   ├── models.py                 # Knowledge base data models
│   ├── schemas.py                # Knowledge base schemas/DTOs
│   ├── service.py                # Knowledge base business logic
│   └── router.py                 # Knowledge base routes
├── ingestion/                    # Data ingestion
│   ├── models.py                 # Ingestion data models
│   ├── schemas.py                # Ingestion schemas/DTOs
│   ├── service.py                # Ingestion business logic
│   ├── router.py                 # Ingestion routes
│   ├── file_processor/           # File processing
│   │   ├── __init__.py
│   │   ├── pdf.py                # PDF processing
│   │   ├── docx.py               # DOCX processing
│   │   ├── csv.py                # CSV processing
│   │   └── text.py               # Plain text processing
│   ├── web_crawler/              # Web crawling
│   │   ├── __init__.py
│   │   ├── firecrawl.py          # Firecrawl API integration
│   │   ├── sitemap.py            # Sitemap processing
│   │   └── html.py               # HTML processing
│   └── chunking/                 # Text chunking
│       ├── __init__.py
│       ├── text_splitter.py      # Text splitting strategies
│       ├── chunk_manager.py      # Chunk management
│       └── metadata.py           # Metadata extraction
├── embeddings/                   # Vector embeddings
│   ├── models.py                 # Embedding data models
│   ├── schemas.py                # Embedding schemas/DTOs
│   ├── service.py                # Embedding business logic
│   └── providers/                # Embedding providers
│       ├── __init__.py
│       ├── openai.py             # OpenAI embeddings
│       ├── huggingface.py        # HuggingFace embeddings
│       └── sentence_transformers.py # SentenceTransformers
├── retrieval/                    # RAG retrieval
│   ├── models.py                 # Retrieval data models
│   ├── schemas.py                # Retrieval schemas/DTOs
│   ├── service.py                # Retrieval business logic
│   ├── router.py                 # Retrieval routes
│   ├── vector_store/             # Vector stores
│   │   ├── __init__.py
│   │   ├── pgvector.py           # PostgreSQL pgvector
│   │   ├── qdrant.py             # Qdrant integration
│   │   └── faiss.py              # FAISS integration
│   └── engines/                  # Retrieval engines
│       ├── __init__.py
│       ├── similarity.py         # Similarity search
│       ├── hybrid.py             # Hybrid search
│       └── reranker.py           # Reranking
├── chatbot/                      # Chatbot configuration
│   ├── models.py                 # Chatbot data models
│   ├── schemas.py                # Chatbot schemas/DTOs
│   ├── service.py                # Chatbot business logic
│   ├── router.py                 # Chatbot routes
│   ├── prompts/                  # Prompt templates
│   │   ├── __init__.py
│   │   ├── base.py               # Base prompts
│   │   ├── system.py             # System prompts
│   │   └── custom.py             # Custom prompts
│   ├── llm/                      # LLM integrations
│   │   ├── __init__.py
│   │   ├── openai.py             # OpenAI models
│   │   ├── anthropic.py          # Anthropic models
│   │   └── local.py              # Local models
│   └── config/                   # Chatbot configurations
│       ├── __init__.py
│       ├── appearance.py         # UI configurations
│       ├── behavior.py           # Behavior settings
│       └── fallback.py           # Fallback strategies
├── integration/                  # External integrations
│   ├── models.py                 # Integration data models
│   ├── schemas.py                # Integration schemas/DTOs
│   ├── service.py                # Integration business logic
│   ├── router.py                 # Integration routes
│   └── providers/                # Integration providers
│       ├── __init__.py
│       ├── api_keys.py           # API key management
│       ├── webhooks.py           # Webhook management
│       └── sdk/                  # SDK implementations
│           ├── __init__.py
│           ├── javascript.py     # JavaScript SDK
│           └── python.py         # Python SDK
├── billing/                      # Billing and subscription
│   ├── models.py                 # Billing data models
│   ├── schemas.py                # Billing schemas/DTOs
│   ├── service.py                # Billing business logic
│   ├── router.py                 # Billing routes
│   └── providers/                # Payment providers
│       ├── __init__.py
│       ├── stripe.py             # Stripe integration
│       └── usage.py              # Usage tracking
├── analytics/                    # Analytics and reporting
│   ├── models.py                 # Analytics data models
│   ├── schemas.py                # Analytics schemas/DTOs
│   ├── service.py                # Analytics business logic
│   ├── router.py                 # Analytics routes
│   └── reports/                  # Report generators
│       ├── __init__.py
│       ├── usage.py              # Usage reports
│       ├── performance.py        # Performance reports
│       └── feedback.py           # Feedback reports
├── activity_log/                 # Activity logging
│   ├── models.py                 # Activity log data models
│   ├── schemas.py                # Activity log schemas/DTOs
│   ├── service.py                # Activity log business logic
│   └── router.py                 # Activity log routes
├── common/                       # Shared utilities
│   ├── models.py                 # Base models
│   ├── schemas.py                # Base schemas
│   ├── errors.py                 # Error definitions
│   ├── pagination.py             # Pagination utilities
│   ├── security.py               # Security utilities
│   ├── validators.py             # Custom validators
│   ├── enums.py                  # Shared enumerations
│   ├── types.py                  # Custom types
│   └── utils/                    # Utility functions
│       ├── __init__.py
│       ├── datetime.py           # Date/time utilities
│       ├── files.py              # File utilities
│       ├── text.py               # Text processing utilities
│       └── http.py               # HTTP utilities
└── workers/                      # Background workers
    ├── celery_app.py             # Celery application
    ├── tasks/                    # Celery tasks
    │   ├── __init__.py
    │   ├── ingestion.py          # Ingestion tasks
    │   ├── embedding.py          # Embedding tasks
    │   ├── notifications.py      # Notification tasks
    │   └── maintenance.py        # Maintenance tasks
    └── scheduler.py              # Task scheduler
```

## Additional Directories

```
alembic/                         # Database migrations
├── versions/                    # Migration versions
└── env.py                       # Alembic environment

tests/                           # Tests
├── conftest.py                  # Test fixtures
├── unit/                        # Unit tests
│   ├── auth/                    # Auth tests
│   ├── teams/                   # Team tests
│   ├── projects/                # Project tests
│   └── ...                      # Other domain tests
├── integration/                 # Integration tests
│   ├── api/                     # API tests
│   ├── db/                      # Database tests
│   └── ...                      # Other integration tests
└── fixtures/                    # Test data fixtures

scripts/                         # Utility scripts
├── seed.py                      # Database seeding
├── backup.py                    # Backup utilities
└── deployment/                  # Deployment scripts

docker/                          # Docker configuration
├── Dockerfile                   # Main Dockerfile
├── docker-compose.yml           # Development composition
├── docker-compose.prod.yml      # Production composition
└── nginx/                       # Nginx configuration

frontend/                        # Frontend components (optional)
├── widgets/                     # Embeddable widgets
│   ├── chat/                    # Chat widget
│   └── search/                  # Search widget
└── admin/                       # Admin dashboard

docs/                            # Documentation
├── api/                         # API documentation
├── guides/                      # User guides
└── development/                 # Development guides
```

## Key Database Tables

```sql
CREATE TYPE user_role AS ENUM ('admin', 'user');
CREATE TYPE team_member_role AS ENUM ('owner', 'admin', 'member');
CREATE TYPE data_source_type AS ENUM ('file', 'website', 'api');
CREATE TYPE data_source_status AS ENUM ('pending', 'processing', 'completed', 'failed');
CREATE TYPE query_feedback AS ENUM ('positive', 'negative', 'neutral');
CREATE TYPE subscription_status AS ENUM ('active', 'canceled', 'past_due');
CREATE TYPE plan_tier AS ENUM ('free', 'starter', 'professional', 'enterprise');

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_verified BOOLEAN NOT NULL DEFAULT FALSE,
    is_superuser BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE teams (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    owner_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    plan_tier plan_tier NOT NULL DEFAULT 'free',
    max_projects INTEGER NOT NULL DEFAULT 1,
    max_storage INTEGER NOT NULL DEFAULT 100,
    max_requests INTEGER NOT NULL DEFAULT 1000,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE team_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role team_member_role NOT NULL DEFAULT 'member',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    UNIQUE(team_id, user_id)
);

CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE knowledge_bases (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE data_sources (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    knowledge_base_id UUID NOT NULL REFERENCES knowledge_bases(id) ON DELETE CASCADE,
    type data_source_type NOT NULL,
    status data_source_status NOT NULL DEFAULT 'pending',
    metadata JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE training_data (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    data_source_id UUID NOT NULL REFERENCES data_sources(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    metadata JSONB NOT NULL DEFAULT '{}',
    embedding vector(1536),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE chatbots (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    knowledge_base_id UUID NOT NULL REFERENCES knowledge_bases(id) ON DELETE CASCADE,
    configuration JSONB NOT NULL DEFAULT '{}',
    public_id VARCHAR(64) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE api_keys (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    key_hash VARCHAR(255) NOT NULL,
    created_by UUID NOT NULL REFERENCES users(id),
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    last_used_at TIMESTAMP WITH TIME ZONE
);

CREATE TABLE activity_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    action VARCHAR(255) NOT NULL,
    resource_type VARCHAR(255) NOT NULL,
    resource_id UUID,
    metadata JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE queries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    chatbot_id UUID NOT NULL REFERENCES chatbots(id) ON DELETE CASCADE,
    query TEXT NOT NULL,
    response TEXT NOT NULL,
    feedback query_feedback,
    session_id VARCHAR(255),
    user_metadata JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE subscriptions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    plan_tier plan_tier NOT NULL,
    status subscription_status NOT NULL DEFAULT 'active',
    current_period_start TIMESTAMP WITH TIME ZONE NOT NULL,
    current_period_end TIMESTAMP WITH TIME ZONE NOT NULL,
    external_id VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE invoices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    subscription_id UUID REFERENCES subscriptions(id) ON DELETE SET NULL,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    status VARCHAR(50) NOT NULL,
    external_id VARCHAR(255),
    metadata JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    paid_at TIMESTAMP WITH TIME ZONE
);

CREATE TABLE usage_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    chatbot_id UUID REFERENCES chatbots(id) ON DELETE CASCADE,
    metric_type VARCHAR(50) NOT NULL,
    value INTEGER NOT NULL,
    recorded_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);
```

## API Endpoints Structure

```
# Auth Routes
POST /api/v1/auth/register
POST /api/v1/auth/login
POST /api/v1/auth/logout
POST /api/v1/auth/refresh
POST /api/v1/auth/verify
POST /api/v1/auth/forgot-password
POST /api/v1/auth/reset-password
GET /api/v1/auth/me
PATCH /api/v1/auth/me

# Team Routes
GET /api/v1/teams
POST /api/v1/teams
GET /api/v1/teams/{team_id}
PUT /api/v1/teams/{team_id}
DELETE /api/v1/teams/{team_id}

# Team Members Routes
GET /api/v1/teams/{team_id}/members
POST /api/v1/teams/{team_id}/members
GET /api/v1/teams/{team_id}/members/{member_id}
PUT /api/v1/teams/{team_id}/members/{member_id}
DELETE /api/v1/teams/{team_id}/members/{member_id}

# Team Invitations Routes
GET /api/v1/teams/{team_id}/invitations
POST /api/v1/teams/{team_id}/invitations
GET /api/v1/teams/{team_id}/invitations/{invitation_id}
PUT /api/v1/teams/{team_id}/invitations/{invitation_id}
DELETE /api/v1/teams/{team_id}/invitations/{invitation_id}
POST /api/v1/invitations/{token}/accept

# Project Routes
GET /api/v1/projects
POST /api/v1/projects
GET /api/v1/projects/{project_id}
PUT /api/v1/projects/{project_id}
DELETE /api/v1/projects/{project_id}

# Knowledge Base Routes
GET /api/v1/projects/{project_id}/knowledge-bases
POST /api/v1/projects/{project_id}/knowledge-bases
GET /api/v1/knowledge-bases/{kb_id}
PUT /api/v1/knowledge-bases/{kb_id}
DELETE /api/v1/knowledge-bases/{kb_id}

# Data Source Routes
GET /api/v1/knowledge-bases/{kb_id}/data-sources
POST /api/v1/knowledge-bases/{kb_id}/data-sources/file
POST /api/v1/knowledge-bases/{kb_id}/data-sources/website
POST /api/v1/knowledge-bases/{kb_id}/data-sources/api
GET /api/v1/data-sources/{data_source_id}
DELETE /api/v1/data-sources/{data_source_id}
GET /api/v1/data-sources/{data_source_id}/status

# Training Data Routes
GET /api/v1/knowledge-bases/{kb_id}/training-data
GET /api/v1/training-data/{training_data_id}
PUT /api/v1/training-data/{training_data_id}
DELETE /api/v1/training-data/{training_data_id}
POST /api/v1/knowledge-bases/{kb_id}/reindex

# Chatbot Routes
GET /api/v1/projects/{project_id}/chatbots
POST /api/v1/projects/{project_id}/chatbots
GET /api/v1/chatbots/{chatbot_id}
PUT /api/v1/chatbots/{chatbot_id}
DELETE /api/v1/chatbots/{chatbot_id}
GET /api/v1/chatbots/{chatbot_id}/configuration
PUT /api/v1/chatbots/{chatbot_id}/configuration

# Integration Routes
GET /api/v1/chatbots/{chatbot_id}/integration
PUT /api/v1/chatbots/{chatbot_id}/integration
GET /api/v1/teams/{team_id}/api-keys
POST /api/v1/teams/{team_id}/api-keys
DELETE /api/v1/teams/{team_id}/api-keys/{key_id}
GET /api/v1/teams/{team_id}/webhooks
POST /api/v1/teams/{team_id}/webhooks
PUT /api/v1/teams/{team_id}/webhooks/{webhook_id}
DELETE /api/v1/teams/{team_id}/webhooks/{webhook_id}

# Query Routes
POST /api/v1/public/chatbots/{public_id}/query
GET /api/v1/chatbots/{chatbot_id}/queries
POST /api/v1/chatbots/{chatbot_id}/queries/{query_id}/feedback

# Analytics Routes
GET /api/v1/teams/{team_id}/analytics/usage
GET /api/v1/projects/{project_id}/analytics/usage
GET /api/v1/chatbots/{chatbot_id}/analytics/usage
GET /api/v1/chatbots/{chatbot_id}/analytics/performance
GET /api/v1/chatbots/{chatbot_id}/analytics/queries

# Billing Routes
GET /api/v1/teams/{team_id}/subscription
POST /api/v1/teams/{team_id}/subscription
PUT /api/v1/teams/{team_id}/subscription
GET /api/v1/teams/{team_id}/invoices
GET /api/v1/teams/{team_id}/usage

# Activity Log Routes
GET /api/v1/teams/{team_id}/activity-logs
GET /api/v1/users/{user_id}/activity-logs
```

## Core Models Overview

### User Model
```python
from datetime import UTC, datetime
from sqlalchemy import Boolean, String, Enum
from sqlalchemy.orm import Mapped, mapped_column
from typing import Optional

from src.common.models import TimestampedModel
from src.auth.enums import UserRole

class User(TimestampedModel):
    __tablename__ = "users"
    
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True)
    hashed_password: Mapped[str] = mapped_column(String(255))
    name: Mapped[str] = mapped_column(String(255))
    role: Mapped[UserRole] = mapped_column(Enum(UserRole), default=UserRole.USER)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    is_verified: Mapped[bool] = mapped_column(Boolean, default=False)
    is_superuser: Mapped[bool] = mapped_column(Boolean, default=False)
```

### Team Model
```python
from datetime import UTC, datetime
from sqlalchemy import String, ForeignKey, Integer, Enum
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import List, Optional

from src.common.models import TimestampedModel
from src.billing.enums import PlanTier

class Team(TimestampedModel):
    __tablename__ = "teams"
    
    name: Mapped[str] = mapped_column(String(255))
    owner_id: Mapped[str] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"))
    plan_tier: Mapped[PlanTier] = mapped_column(Enum(PlanTier), default=PlanTier.FREE)
    max_projects: Mapped[int] = mapped_column(Integer, default=1)
    max_storage: Mapped[int] = mapped_column(Integer, default=100)
    max_requests: Mapped[int] = mapped_column(Integer, default=1000)
    
    # Relationships
    owner = relationship("User", foreign_keys=[owner_id], backref="owned_teams")
    members = relationship("TeamMember", back_populates="team", cascade="all, delete-orphan")
    projects = relationship("Project", back_populates="team", cascade="all, delete-orphan")
```

### Project Model
```python
from datetime import UTC, datetime
from sqlalchemy import String, ForeignKey, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import List, Optional

from src.common.models import TimestampedModel

class Project(TimestampedModel):
    __tablename__ = "projects"
    
    name: Mapped[str] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    team_id: Mapped[str] = mapped_column(ForeignKey("teams.id", ondelete="CASCADE"))
    
    # Relationships
    team = relationship("Team", back_populates="projects")
    knowledge_bases = relationship("KnowledgeBase", back_populates="project", cascade="all, delete-orphan")
    chatbots = relationship("Chatbot", back_populates="project", cascade="all, delete-orphan")
```

### Knowledge Base Model
```python
from datetime import UTC, datetime
from sqlalchemy import String, ForeignKey, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import List, Optional

from src.common.models import TimestampedModel

class KnowledgeBase(TimestampedModel):
    __tablename__ = "knowledge_bases"
    
    name: Mapped[str] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    project_id: Mapped[str] = mapped_column(ForeignKey("projects.id", ondelete="CASCADE"))
    
    # Relationships
    project = relationship("Project", back_populates="knowledge_bases")
    data_sources = relationship("DataSource", back_populates="knowledge_base", cascade="all, delete-orphan")
    chatbots = relationship("Chatbot", back_populates="knowledge_base")
```
