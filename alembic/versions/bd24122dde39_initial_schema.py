"""initial_schema

Revision ID: bd24122dde39
Revises:
Create Date: 2025-10-02 23:44:49.987787

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'bd24122dde39'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create subscription_plans table first (no foreign key dependencies)
    op.create_table(
        'subscription_plans',
        sa.Column(
            'id',
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('subscription_plans_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            'name', sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            'display_name',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'description', sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            'stripe_price_id_monthly',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'stripe_price_id_yearly',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'stripe_product_id',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_monthly_usd',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'price_yearly_usd',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'price_monthly_eur',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_yearly_eur',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_monthly_gbp',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_yearly_gbp',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_monthly_brl',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'price_yearly_brl',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'max_projects', sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'max_users', sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'max_storage_gb', sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'features',
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'is_active', sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'sort_order', sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id', name='subscription_plans_pkey'),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        op.f('ix_subscription_plans_id'),
        'subscription_plans',
        ['id'],
        unique=False,
    )
    op.create_index(
        op.f('ix_subscription_plans_name'),
        'subscription_plans',
        ['name'],
        unique=True,
    )
    
    # Create customer_subscriptions table (depends on subscription_plans and organizations)
    op.create_table(
        'customer_subscriptions',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            'organization_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            'stripe_customer_id',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'stripe_subscription_id',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'status',
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'current_period_start',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'current_period_end',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'cancel_at_period_end',
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'canceled_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'trial_start',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'trial_end',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'current_users_count',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'current_projects_count',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'current_storage_gb',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'extra_data',
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['organization_id'],
            ['organizations.id'],
            name=op.f('customer_subscriptions_organization_id_fkey'),
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(
            ['plan_id'],
            ['subscription_plans.id'],
            name=op.f('customer_subscriptions_plan_id_fkey'),
            ondelete='SET NULL',
        ),
        sa.PrimaryKeyConstraint(
            'id', name=op.f('customer_subscriptions_pkey')
        ),
        sa.UniqueConstraint(
            'stripe_customer_id',
            name=op.f('customer_subscriptions_stripe_customer_id_key'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        sa.UniqueConstraint(
            'stripe_subscription_id',
            name=op.f('customer_subscriptions_stripe_subscription_id_key'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f('ix_customer_subscriptions_id'),
        'customer_subscriptions',
        ['id'],
        unique=False,
    )
    op.create_index(
        op.f('ix_customer_subscriptions_organization_id'),
        'customer_subscriptions',
        ['organization_id'],
        unique=False,
    )
    op.create_index(
        op.f('ix_customer_subscriptions_status'),
        'customer_subscriptions',
        ['status'],
        unique=False,
    )
    
    # Create billing_history table (depends on customer_subscriptions)
    op.create_table(
        'billing_history',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            'subscription_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'stripe_invoice_id',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'stripe_payment_intent_id',
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            'currency',
            sa.VARCHAR(length=3),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'status',
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'invoice_date',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'paid_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'invoice_url', sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            'invoice_pdf', sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            'description', sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            'extra_data',
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['subscription_id'],
            ['customer_subscriptions.id'],
            name=op.f('billing_history_subscription_id_fkey'),
            ondelete='CASCADE',
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('billing_history_pkey')),
        sa.UniqueConstraint(
            'stripe_invoice_id',
            name=op.f('billing_history_stripe_invoice_id_key'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f('ix_billing_history_id'), 'billing_history', ['id'], unique=False
    )
    op.create_index(
        op.f('ix_billing_history_status'),
        'billing_history',
        ['status'],
        unique=False,
    )
    op.create_index(
        op.f('ix_billing_history_subscription_id'),
        'billing_history',
        ['subscription_id'],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order of creation (due to foreign key dependencies)
    op.drop_index(
        op.f('ix_billing_history_subscription_id'),
        table_name='billing_history',
    )
    op.drop_index(
        op.f('ix_billing_history_status'), table_name='billing_history'
    )
    op.drop_index(op.f('ix_billing_history_id'), table_name='billing_history')
    op.drop_table('billing_history')
    
    op.drop_index(
        op.f('ix_customer_subscriptions_status'),
        table_name='customer_subscriptions',
    )
    op.drop_index(
        op.f('ix_customer_subscriptions_organization_id'),
        table_name='customer_subscriptions',
    )
    op.drop_index(
        op.f('ix_customer_subscriptions_id'),
        table_name='customer_subscriptions',
    )
    op.drop_table('customer_subscriptions')
    
    op.drop_index(
        op.f('ix_subscription_plans_name'), table_name='subscription_plans'
    )
    op.drop_index(
        op.f('ix_subscription_plans_id'), table_name='subscription_plans'
    )
    op.drop_table('subscription_plans')
    # ### end Alembic commands ###
